{"ast":null,"code":"// frontend/src/components/Chat.js\nimport React,{useState,useEffect,useRef}from'react';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const API_BASE='https://termiclad-backend.onrender.com';function Chat(_ref){let{user,token,socket,onLogout}=_ref;const[users,setUsers]=useState([]);const[selectedUser,setSelectedUser]=useState(null);const[messages,setMessages]=useState([]);const[newMessage,setNewMessage]=useState('');const[loading,setLoading]=useState(false);const messagesEndRef=useRef(null);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});};useEffect(()=>{scrollToBottom();},[messages]);useEffect(()=>{fetchUsers();},[]);useEffect(()=>{if(socket){socket.on('new_message',message=>{if(selectedUser&&(message.sender_id===selectedUser.id||message.receiver_id===selectedUser.id)){setMessages(prev=>[...prev,message]);}});socket.on('message_sent',message=>{setMessages(prev=>[...prev,message]);});return()=>{socket.off('new_message');socket.off('message_sent');};}},[socket,selectedUser]);const fetchUsers=async()=>{try{const response=await fetch(`${API_BASE}/api/users`,{headers:{'Authorization':`Bearer ${token}`}});if(response.ok){const usersData=await response.json();setUsers(usersData);}}catch(error){console.error('Failed to fetch users:',error);}};const fetchMessages=async userId=>{try{setLoading(true);const response=await fetch(`${API_BASE}/api/messages/${userId}`,{headers:{'Authorization':`Bearer ${token}`}});if(response.ok){const messagesData=await response.json();setMessages(messagesData);}}catch(error){console.error('Failed to fetch messages:',error);}finally{setLoading(false);}};const handleUserSelect=selectedUser=>{setSelectedUser(selectedUser);fetchMessages(selectedUser.id);};const sendMessage=async e=>{e.preventDefault();if(!newMessage.trim()||!selectedUser)return;const messageData={senderId:user.id,receiverId:selectedUser.id,message:newMessage.trim()};socket.emit('send_message',messageData);setNewMessage('');};const formatTime=timestamp=>{return new Date(timestamp).toLocaleTimeString('en-US',{hour:'2-digit',minute:'2-digit'});};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-sidebar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"user-info\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-avatar\",children:user.username[0].toUpperCase()}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"username\",children:user.username}),/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:\"Online\"})]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:onLogout,className:\"logout-button\",children:\"Logout\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"users-list\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Contacts\"}),users.map(userItem=>/*#__PURE__*/_jsxs(\"div\",{className:`user-item ${(selectedUser===null||selectedUser===void 0?void 0:selectedUser.id)===userItem.id?'active':''}`,onClick:()=>handleUserSelect(userItem),children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-avatar\",children:userItem.username[0].toUpperCase()}),/*#__PURE__*/_jsxs(\"div\",{className:\"user-details\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"username\",children:userItem.username}),/*#__PURE__*/_jsx(\"div\",{className:`status ${userItem.is_online?'online':'offline'}`,children:userItem.is_online?'Online':'Offline'})]})]},userItem.id))]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-main\",children:selectedUser?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-user-info\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"user-avatar\",children:selectedUser.username[0].toUpperCase()}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"username\",children:selectedUser.username}),/*#__PURE__*/_jsx(\"div\",{className:`status ${selectedUser.is_online?'online':'offline'}`,children:selectedUser.is_online?'Online':'Offline'})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"messages-container\",children:[loading?/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading messages...\"}):messages.length>0?messages.map(message=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${message.sender_id===user.id?'sent':'received'}`,children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:message.message}),/*#__PURE__*/_jsx(\"div\",{className:\"message-time\",children:formatTime(message.timestamp)})]},message.id)):/*#__PURE__*/_jsx(\"div\",{className:\"no-messages\",children:\"No messages yet. Start the conversation!\"}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:sendMessage,className:\"message-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newMessage,onChange:e=>setNewMessage(e.target.value),placeholder:\"Type a message...\",className:\"message-input\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"send-button\",children:\"Send\"})]})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"no-chat-selected\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to Termiclad!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Select a contact to start chatting\"})]})})]});}export default Chat;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","API_BASE","Chat","_ref","user","token","socket","onLogout","users","setUsers","selectedUser","setSelectedUser","messages","setMessages","newMessage","setNewMessage","loading","setLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchUsers","on","message","sender_id","id","receiver_id","prev","off","response","fetch","headers","ok","usersData","json","error","console","fetchMessages","userId","messagesData","handleUserSelect","sendMessage","e","preventDefault","trim","messageData","senderId","receiverId","emit","formatTime","timestamp","Date","toLocaleTimeString","hour","minute","className","children","username","toUpperCase","onClick","map","userItem","is_online","length","ref","onSubmit","type","value","onChange","target","placeholder"],"sources":["C:/Users/maogr/Desktop/Termiclad/frontend/src/components/Chat.js"],"sourcesContent":["// frontend/src/components/Chat.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst API_BASE = 'https://termiclad-backend.onrender.com';\r\n\r\nfunction Chat({ user, token, socket, onLogout }) {\r\n    const [users, setUsers] = useState([]);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (socket) {\r\n            socket.on('new_message', (message) => {\r\n                if (selectedUser &&\r\n                    (message.sender_id === selectedUser.id || message.receiver_id === selectedUser.id)) {\r\n                    setMessages(prev => [...prev, message]);\r\n                }\r\n            });\r\n\r\n            socket.on('message_sent', (message) => {\r\n                setMessages(prev => [...prev, message]);\r\n            });\r\n\r\n            return () => {\r\n                socket.off('new_message');\r\n                socket.off('message_sent');\r\n            };\r\n        }\r\n    }, [socket, selectedUser]);\r\n\r\n    const fetchUsers = async () => {\r\n        try {\r\n            const response = await fetch(`${API_BASE}/api/users`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            });\r\n\r\n            if (response.ok) {\r\n                const usersData = await response.json();\r\n                setUsers(usersData);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to fetch users:', error);\r\n        }\r\n    };\r\n\r\n    const fetchMessages = async (userId) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await fetch(`${API_BASE}/api/messages/${userId}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            });\r\n\r\n            if (response.ok) {\r\n                const messagesData = await response.json();\r\n                setMessages(messagesData);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to fetch messages:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleUserSelect = (selectedUser) => {\r\n        setSelectedUser(selectedUser);\r\n        fetchMessages(selectedUser.id);\r\n    };\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!newMessage.trim() || !selectedUser) return;\r\n\r\n        const messageData = {\r\n            senderId: user.id,\r\n            receiverId: selectedUser.id,\r\n            message: newMessage.trim()\r\n        };\r\n\r\n        socket.emit('send_message', messageData);\r\n        setNewMessage('');\r\n    };\r\n\r\n    const formatTime = (timestamp) => {\r\n        return new Date(timestamp).toLocaleTimeString('en-US', {\r\n            hour: '2-digit',\r\n            minute: '2-digit'\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            {/* Sidebar */}\r\n            <div className=\"chat-sidebar\">\r\n                <div className=\"sidebar-header\">\r\n                    <div className=\"user-info\">\r\n                        <div className=\"user-avatar\">{user.username[0].toUpperCase()}</div>\r\n                        <div>\r\n                            <div className=\"username\">{user.username}</div>\r\n                            <div className=\"status\">Online</div>\r\n                        </div>\r\n                    </div>\r\n                    <button onClick={onLogout} className=\"logout-button\">\r\n                        Logout\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"users-list\">\r\n                    <h3>Contacts</h3>\r\n                    {users.map(userItem => (\r\n                        <div\r\n                            key={userItem.id}\r\n                            className={`user-item ${selectedUser?.id === userItem.id ? 'active' : ''}`}\r\n                            onClick={() => handleUserSelect(userItem)}\r\n                        >\r\n                            <div className=\"user-avatar\">\r\n                                {userItem.username[0].toUpperCase()}\r\n                            </div>\r\n                            <div className=\"user-details\">\r\n                                <div className=\"username\">{userItem.username}</div>\r\n                                <div className={`status ${userItem.is_online ? 'online' : 'offline'}`}>\r\n                                    {userItem.is_online ? 'Online' : 'Offline'}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Chat Area */}\r\n            <div className=\"chat-main\">\r\n                {selectedUser ? (\r\n                    <>\r\n                        <div className=\"chat-header\">\r\n                            <div className=\"chat-user-info\">\r\n                                <div className=\"user-avatar\">\r\n                                    {selectedUser.username[0].toUpperCase()}\r\n                                </div>\r\n                                <div>\r\n                                    <div className=\"username\">{selectedUser.username}</div>\r\n                                    <div className={`status ${selectedUser.is_online ? 'online' : 'offline'}`}>\r\n                                        {selectedUser.is_online ? 'Online' : 'Offline'}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"messages-container\">\r\n                            {loading ? (\r\n                                <div className=\"loading\">Loading messages...</div>\r\n                            ) : messages.length > 0 ? (\r\n                                messages.map(message => (\r\n                                    <div\r\n                                        key={message.id}\r\n                                        className={`message ${message.sender_id === user.id ? 'sent' : 'received'}`}\r\n                                    >\r\n                                        <div className=\"message-content\">\r\n                                            {message.message}\r\n                                        </div>\r\n                                        <div className=\"message-time\">\r\n                                            {formatTime(message.timestamp)}\r\n                                        </div>\r\n                                    </div>\r\n                                ))\r\n                            ) : (\r\n                                <div className=\"no-messages\">\r\n                                    No messages yet. Start the conversation!\r\n                                </div>\r\n                            )}\r\n                            <div ref={messagesEndRef} />\r\n                        </div>\r\n\r\n                        <form onSubmit={sendMessage} className=\"message-form\">\r\n                            <input\r\n                                type=\"text\"\r\n                                value={newMessage}\r\n                                onChange={(e) => setNewMessage(e.target.value)}\r\n                                placeholder=\"Type a message...\"\r\n                                className=\"message-input\"\r\n                            />\r\n                            <button type=\"submit\" className=\"send-button\">\r\n                                Send\r\n                            </button>\r\n                        </form>\r\n                    </>\r\n                ) : (\r\n                    <div className=\"no-chat-selected\">\r\n                        <h2>Welcome to Termiclad!</h2>\r\n                        <p>Select a contact to start chatting</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}